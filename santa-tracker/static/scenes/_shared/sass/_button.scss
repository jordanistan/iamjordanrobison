/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

$button-bp: 768px; // matches santa-chrome bp
$button-colors: (
  green:      (base: #32a658, shadow: #2a8c4a),
  orange:     (base: #ff9802, shadow: #f57c00),
  orangered:  (base: #ff3f00, shadow: #f52f00),
  purple:     (base: #ad00ad, shadow: #8f0093),
  red:        (base: #ff0060, shadow: #e70058),
  white:      (base: #efefef, shadow: #c1dbd9),
  yellow:     (base: #ffc100, shadow: #f0922b),
  toolbar:    (base: #ff0160, shadow: #e70058),
);
$button-shadow: rgba(0, 0, 0, 0.16);

// s: default mobile size and small btn
// m: default desktop size
// l: large btn
// rad is for default rectangular button
$button-sizes: (
  s: (size: 42px, bg: 22px, font: 16px, pad: 0 8px, rad: 5px, line-diff: 0px),
  m: (size: 55px, bg: 30px, font: 22px, pad: 0 12px, rad: 8px, line-diff: 3px),
  l: (size: 88px, bg: 50px, font: 28px, pad: 0 45px, rad: 8px, line-diff: 8px),
);

$button-icons: (
  globe: globe,
  home: home,
  menu: menu-hamburger,
  mute: volume-off,
  next: arrow-key-right,
  next-dark: arrow-key-right-dark,
  pause: pause,
  play: play,
  prev: arrow-key-left,
  prev-dark: arrow-key-left-dark,
  share: share,
  shuffle: shuffle,
  refresh: refresh,
  replay: replay,
  trash: trash,
  unmute: volume-on,
  next-arrow: arrow-right,
  prev-arrow: arrow-left
);

// Button color mixins
@function setColor($color, $tone: base) {
  @return map-get(map-get($button-colors, $color), $tone);
}

@mixin ButtonColor($color, $custom-base: null, $custom-shadow: null) {
  $color-base: '';
  $color-shadow: '';

  @if $custom-base and $custom-shadow {
    $color-base: $custom-base;
    $color-shadow: $custom-shadow;
  } @else {
    $color-base: setColor($color);
    $color-shadow: setColor($color, shadow);
  }

  background-color: $color-base;
  box-shadow: 3px 6px 0 $color-shadow, 8px 9px 0 $button-shadow;
  transform: translate(-3px, -6px);

  &:active {
    // transition to a shadow of the same color, but just hidden
    box-shadow:
        0 0 0 $color-shadow,
        0 0 2px $button-shadow !important;
  }

  @if $color == white {
    color: #444;
  }

  &.Button--round {
    // same as square shadow/transform

    &.Button--small {
      box-shadow: 2px 4px 0 $color-shadow, 5px 7px 0 $button-shadow;
      transform: translate(-2px, -4px);
    }

    &.Button--large {
      box-shadow: 5px 7px 0 $color-shadow, 13px 14px 0 $button-shadow;
      transform: translate(-5px, -7px);
    }
  }
}

// Button size mixins
@function getSize($s, $val: size) {
  @return map-get(map-get($button-sizes, $s), $val);
}

@mixin ButtonSize($s) {
  $height: getSize($s) - getSize($s, line-diff);

  background-size: getSize($s, bg);
  border-radius: getSize($s, rad);
  font-size: getSize($s, font);
  line-height: $height;
  padding: getSize($s, pad);
  min-height: $height;
}

@mixin ButtonRound($s) {
  height: getSize($s);
  min-width: getSize($s);
  width: getSize($s);
}

$shared: '../_shared/' !default;
@mixin ButtonIcon($icon) {
  background-image: url(#{$shared}img/button/#{$icon}.svg);
}

##{$name} {
  $duration-in: 0.05s;
  $duration-out: 0.25s;

  .Button {
    -webkit-font-smoothing: antialiased;
    background-position: 50% 50%;
    background-repeat: no-repeat;
    border: none;
    box-sizing: border-box;
    color: #fff;
    cursor: pointer;
    display: inline-block;
    font-family: 'Roboto', sans-serif;
    -webkit-font-smoothing: antialiased;
    font-weight: normal;
    margin: 0 4px;
    position: relative;
    text-align: center;
    text-decoration: none;
    transition: box-shadow $duration-out ease-in-out, transform $duration-out ease-in-out, height $duration-out ease-in-out, width $duration-out ease-in-out;
    user-select: none;

    @include ButtonColor(purple);
    @include ButtonSize(s);

    @media (min-width: $button-bp) {
      @include ButtonSize(m);
    }

    &:active {
      transition-duration: $duration-in;
      transform: translate(0, 0) !important;
    }
  }

  .Button--small {
    @include ButtonSize(s);
  }

  .Button--large {
    @include ButtonSize(l);
  }

  .Button--round {
    @include ButtonRound(s);
    border-radius: 50% !important;
    padding: 0 !important; // no padding on circles

    @media (min-width: $button-bp) {
      @include ButtonRound(m);
    }

    &.Button--small {
      @include ButtonRound(s);
    }

    &.Button--large {
      @include ButtonRound(l);
    }

    &.Button--text {
      border-radius: 10000px !important;
    }
  }

  .Button--text {
    width: auto;
  }

  .Button--noText {
    overflow: hidden;
    text-indent: 100%;
    white-space: nowrap;
  }

  @each $icon, $file in $button-icons {
    .Button--#{$icon} {
      background-image: url(#{$shared}img/button/#{$file}.svg);
    }
  }
}
